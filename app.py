import streamlit as st
import requests
import streamlit.components.v1 as components

st.set_page_config(page_title="Prophet Model Results", page_icon="📈", layout="wide")

def load_html_from_github(filename):
    """Load HTML plot from GitHub repository"""
    github_base = "https://raw.githubusercontent.com/ahtalebi/prophet-demo/main/outputs/"
    
    try:
        response = requests.get(github_base + filename, timeout=10)
        if response.status_code == 200:
            return response.text, None
        else:
            return None, f"File not found: {filename}"
    except Exception as e:
        return None, f"Error loading {filename}: {str(e)}"

def main():
    st.title("📈 Prophet Time Series Model Results")
    st.markdown("**Actual Prophet model plots from GitHub Actions**")
    
    # Create tabs for your actual Prophet plots
    tab1, tab2, tab3 = st.tabs(["📈 **Forecast Plot**", "🔍 **Components**", "📊 **Performance**"])
    
    with tab1:
        st.subheader("Prophet Forecast Model Output")
        html_content, error = load_html_from_github("interactive_forecast.html")
        if html_content:
            # Display the actual Prophet HTML plot
            components.html(html_content, height=600, scrolling=True)
            st.success("✅ Prophet forecast plot loaded!")
        else:
            st.error(f"❌ {error}")
    
    with tab2:
        st.subheader("Prophet Components Analysis")
        html_content, error = load_html_from_github("interactive_components.html")
        if html_content:
            # Display the actual Prophet components HTML plot
            components.html(html_content, height=800, scrolling=True)
            st.success("✅ Prophet components plot loaded!")
        else:
            st.error(f"❌ {error}")
    
    with tab3:
        st.subheader("Model Performance Analysis")
        html_content, error = load_html_from_github("performance_analysis.html")
        if html_content:
            # Display the actual performance HTML plot
            components.html(html_content, height=700, scrolling=True)
            st.success("✅ Performance analysis loaded!")
        else:
            st.error(f"❌ {error}")
    
    # Add refresh info
    st.markdown("---")
    st.info("""
    🔄 **These are the actual Prophet model plots** generated by your script!
    - Updates automatically when you push changes to GitHub
    - Shows real Prophet forecasting results, not recreated plots
    - Interactive plots with zoom, pan, and hover capabilities
    """)

if __name__ == "__main__":
    main()
